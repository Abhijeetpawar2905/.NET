1)Create Account class having instance member 
1. id- id should be generated by application, it is readonly property
2. name – write getter setter 
3. balance- Write getter setter 
It has deposit method who’s job is to increase the balance.
Declare static float Interestrate=0.07.
It has withdraw method who’s job is to reduce balance.
Declare conts float minbal=1000. When user withdraw money your application should ensure that minimum balance is maintain. 
Give appropriate validation like user can not deposit or withdraw 0 or negative. user can not open account with 0 amount
When you run your application at the beginning it should print name of bank and copy right detail.
It has static method which will calculate and return  interest amount for each account holder and increase the balance.
Write display method who’s job is to display Id name and balance and interest received.
If you are comfortable the exception try to use it and handle it also.
sol:
using System;

namespace Problem1
{
    public class Account
    {
        int id;
        static int getid;
        string name;
        double balance;
        static float InterestRate = 0.07f;
        const float minbal = 1000;
        double interest;

        public int Id
        {
            get { return id; }
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public double Balance
        {
            get { return balance; }
            set { balance = value; }
        }
        public double Interest
        {
            get { return interest; } 
            set { interest = value; } 
        }

        static Account()
        {
            Console.WriteLine("Bank of Spain @Infopro Limited.com");
        }

        public Account(string name, int balance)
        {
            Name = name;
            if (balance > 0)
                Balance = balance;
            else
            {
                throw new Exception("Balance should be greater than zero");
            }
            this.id = ++getid;
        }

        public void deposit(int amount)
        {
            if (amount > 0)
                balance += amount;
        }
        public void withdraw(int amount)
        {
            if (balance - amount > 1000)
            {
                balance -= amount;
            }
            else
            {
                throw new Exception(" Not sufficient Balance ");
            }
        }

        public static double payInt(Account obj)
        {
            obj.Interest = obj.balance * InterestRate;
            obj.balance += obj.Interest;
            return obj.Interest;
        }

        public void display()
        {
            Console.WriteLine("Name : {0} id : {1} balance : {2} interest  : {3}", name, id, balance, interest);
        }

    }
    public class Demo
    {
        public static void Main()
        {
            Account acnt1=null;
            Account acnt2=null;
            try 
            {
                acnt1 = new Account("KL", 50000);
            }
            catch(Exception ie)
            {
                Console.WriteLine(ie);
            }
            try
            {
                acnt2 = new Account("AB", 100000);
            }
            catch (Exception ie)
            {
                Console.WriteLine(ie);
            }
            
            acnt1.deposit(50000);
            acnt2.deposit(600000);
            try { acnt1.withdraw(20000); }
            catch(Exception ie)
            {
                Console.WriteLine(ie);
            }
            try { acnt2.withdraw(40000); }
            catch(Exception ie)
            {
                Console.WriteLine(ie);
            }
            
            Console.WriteLine("Account1 has interest = "+Account.payInt(acnt1));
            Console.WriteLine("Account2 has interest = "+Account.payInt(acnt2));
            acnt1.display();
            acnt2.display();
        }

    }
}
